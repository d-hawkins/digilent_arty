# -----------------------------------------------------------------------------
# questasim.tcl
#
# 9/1/2025 D. W. Hawkins (dwh@caltech.edu)
#
# Questasim simulation script for Vivado.
#
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Tool check
# -----------------------------------------------------------------------------
#
# Check the tool is QuestaSim (vish)
set toolname [file rootname [file tail [info nameofexecutable]]]
if {![string equal $toolname "vish"]} {
	error "Error: unexpected tool name '$toolname'!"
}

# -----------------------------------------------------------------------------
# Vivado Libraries Setup
# -----------------------------------------------------------------------------
#
if {![info exist XILINX_VIVADO]} {
	if {[info exist ::env(XILINX_VIVADO)]} {
		set XILINX_VIVADO [file normalize $::env(XILINX_VIVADO)]
	} else {
		error "The environment variable XILINX_VIVADO is not set!"
	}
}

# The Xilinx Vivado library compiler does not define a standard location for
# libraries. The convention adopted/expected by this script is that the
# libraries have been compiled into the Vivado installation folder, eg.,
# Vivado 2020.2 libraries were installed for QuestaSim 2019.4 into:
#
# C:\software\Xilinx\Vivado\2020.2\compile_simlib\questasim_2019.4
#
proc questasim_version {} {
	# QuestaSim version details
	set ver_str [vsim -version]
	if {[string match "Questa Sim*" $ver_str] == 1} {
			set ver_name "QuestaSim"
	} elseif {[string match "*ModelSim*" $ver_str] == 1} {
			set ver_name "ModelSim"
	} else {
			error "Error: ModelSim/QuestaSim tool name parse failed!"
	}
	# Regular expression syntax:
	#  - find the version number in <number>.<number> format
	#    eg., 10.6 or 10.7
	#  - and then everything up until the next space, which may
	#    or may not include a letter, eg., 10.6c vs 10.7 (no letter)
	if {[regexp {vsim (\d+[.]\d+\S*)} $ver_str match ver_number] != 1} {
			error "Error: $ver_name version parse failed!"
	}
	return $ver_number
}

# Vivado version
# eg., for XILINX_VIVADO = C:\software\Xilinx\Vivado\2020.2 return 2020.2
proc vivado_version {} {
	return [file tail $::env(XILINX_VIVADO)]
}

# Vivado compiled libraries path
proc vivado_lib_path {} {
	set ver_number [questasim_version]
	set lib_path $::XILINX_VIVADO/compile_simlib/questasim_${ver_number}
	return $lib_path
}

# Vivado compiled libraries directories
# * returns all the compiled libraries directories
proc vivado_lib_dirs {} {
	return [glob -directory [vivado_lib_path] -type d *]
}

# Questasim modelsim.ini
# * create a modelsim.ini local to the project folder
# * reference the master .ini file in the Questasim installation
# * map each library found in the Vivado compiled libraries folder
proc setup_modelsim_ini {filename} {
	set fd [open $filename "w+"]
	if {$fd < 0} {
			error "Open $filename failed!"
	}

	# Reference the installed/master Modelsim.ini file
	puts $fd "; modelsim.ini"
	puts $fd "; Autogenerated by scripts/sim.tcl"
	puts $fd "\[Library\]"
	puts $fd "; QuestaSim read-only modelsim.ini (master file)"
	puts $fd "others = \$MODEL_TECH/../modelsim.ini"
	puts $fd ""

	# Xilinx Vivado compiled libraries
	puts $fd "; Xilinx Vivado [vivado_version] Libraries"
	set lib_dirs [vivado_lib_dirs]
	set N [llength $lib_dirs]
	foreach lib_dir $lib_dirs {
		puts $fd "[file tail $lib_dir] = $lib_dir"
	}
	close $fd
}

# -----------------------------------------------------------------------------
# Questa Setup
# -----------------------------------------------------------------------------
#
# Setup the modelsim.ini
if {![file exist modelsim.ini]} {
	setup_modelsim_ini modelsim.ini

	# Setup the work library
	vlib build/questasim
	vmap work ./build/questasim
}

# -----------------------------------------------------------------------------
# Vivado synthesis code
# -----------------------------------------------------------------------------
#
# Common verification
set verif [file normalize ../verif]

# Simulation utilities
source $verif/scripts/questasim_utils.tcl

# Vivado wrote the simulation files report
set report_name "build/vivado/system_sim_files.txt"
if {![file exists $report_name]} {
	error "Error: Vivado simulation files report is missing!"
}

# Read the report
set sim_table [vivado_sim_report_read $report_name]

# Convert to dictionary
set sim_dict  [vivado_sim_table_to_dict $sim_table]

# Simulation libraries (matches elaborate.do)
set sim_libs  [vivado_sim_libraries $sim_dict]
puts "sim_libs = $sim_libs"

# Simulation files for library xil_defaultlib
set sim_files_xil [vivado_sim_files $sim_dict xil_defaultlib]
puts "sim_files_xil = $sim_files_xil"

# Simulation files for library work
set sim_files_work [vivado_sim_files $sim_dict work]
puts "sim_files_work = $sim_files_work"

# Combined files list
set sim_files [list {*}$sim_files_xil {*}$sim_files_work]

# Loop over the files
foreach sim_file $sim_files {
	puts "$sim_file"
	set ext [file ext $sim_file]
	case $ext {
		".sv"  {vlog -L xilinx_vip "+incdir+$XILINX_VIVADO/data/xilinx_vip/include" $sim_file}
		".v"   {vlog -L xilinx_vip "+incdir+$XILINX_VIVADO/data/xilinx_vip/include" $sim_file}
		".vhd" {vcom $sim_file}
	}
}

# Top-level design
vlog src/arty.sv

# -----------------------------------------------------------------------------
# Testbench
# -----------------------------------------------------------------------------
#
echo "Compiling the testbench"

# Verilog global (used by Xilinx components)
vlog $XILINX_VIVADO/data/verilog/src/glbl.v

# Verification classes
vlog +incdir+$XILINX_VIVADO/data/xilinx_vip/include \
	-L xilinx_vip $verif/test/aximm_base_pkg.sv
vlog +incdir+$XILINX_VIVADO/data/xilinx_vip/include \
	-L xilinx_vip $verif/test/aximm_memory_pkg.sv
vlog +incdir+$XILINX_VIVADO/data/xilinx_vip/include \
	-L xilinx_vip $verif/test/aximm_gpio_pkg.sv

# Testbench classes
vlog +incdir+$XILINX_VIVADO/data/xilinx_vip/include \
	-L xilinx_vip test/arty_test_pkg.sv
vlog +incdir+$XILINX_VIVADO/data/xilinx_vip/include \
	-L xilinx_vip test/arty_tb.sv

# -----------------------------------------------------------------------------
# Run the testbench
# -----------------------------------------------------------------------------
#
proc arty_tb {} {

	# Vivado simulation libraries
	set lib_list $::sim_libs

	# Remove xil_defaultlib
	set idx [lsearch $lib_list xil_defaultlib]
	if {$idx >= 0} {
		set lib_list [lreplace $lib_list $idx $idx]
	}

	# Append the Vivado simulation libraries
	# * these are required, but not listed in the Vivado simulation report
	lappend lib_list {*}[list \
		secureip       \
		unimacro_ver   \
		unisims_ver    \
		xilinx_vip     \
		xpm            \
	]

	# Add the -L vsim option before each of the library names
	set libargs {}
	foreach lib $lib_list {
		lappend libargs {*}[list -L $lib]
	}

	# Run the testbench with the (expanded) library list
#	vsim -t ps -voptargs=+acc +nowarnTSCALE +nowarnTFMPC \
#		+nowarnPCDPC +nowarn8630 +model_data+$tmp \
#		{*}$libargs glbl arty_tb

	vsim -t ps -voptargs=+acc +nowarnTSCALE +nowarnTFMPC \
		{*}$libargs glbl arty_tb

	# 'source' the script, so that it can use 'lanes'
	source scripts/arty_tb.do
	run -a
}

echo " "
echo "Testbench commands"
echo "------------------"
echo " "
echo "Questasim [questasim_version] simulating with Vivado [vivado_version] libraries"
echo " "
echo "arty_tb - run the Arty testbench"
echo " "
