# -----------------------------------------------------------------------------
# system_bd.tcl
#
# 9/1/2025 D. W. Hawkins (dwh@caltech.edu)
#
# Script to re-create the 'system' block design.
#
# -----------------------------------------------------------------------------
# Notes
# -----
#
# 1. IP versions
#
#    Each version of Vivado only supports a single IP version. If Vivado
#    updates an IP version, then this script will need to be changed.
#    Minor version changes can be accommodated by changing the IP version
#    check logic. Major version changes may require conditional logic around
#    the IP configuration or connections.
#
#    Use 'get_ipdefs -help' to learn how to query the Vivado IP database.
#
#    If IP versions need to be checked, the version can be extracted from
#    the VNLV string using Tcl split, or the IP can be queried, eg.,
#
#    tcl> set obj [get_ipdefs -all xilinx.com:ip:jtag_axi*]
#    xilinx.com:ip:jtag_axi:1.2
#    tcl> get_property VERSION $obj
#    1.2
#
#    The get_property response could be used in conditional logic.
#
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Check the Block Design IP
# -----------------------------------------------------------------------------
#
proc check_block_design_ip_is_ok {} {

	# IP used in the design
	set ip_list {}
	#
	# IP versions supported by Vivado 2024.1
	set ip_list [list \
		xilinx.com:ip:jtag_axi:1.2      \
		xilinx.com:ip:axi_vip:1.1       \
		xilinx.com:ip:smartconnect:1.0  \
		xilinx.com:ip:axi_fifo_mm_s:4.3 \
	]

	# Check the IP Catalog
	set ip_missing {}
	foreach ip_vlnv $ip_list {
		set ip_obj [get_ipdefs -all -quiet $ip_vlnv]
		if {$ip_obj eq ""} {
			lappend ip_missing $ip_vlnv
		}
	}
	if {[llength $ip_missing]} {
		# Error message
		set msg    "The following IPs were not found in the IP Catalog:\n"
		append msg "  $ip_missing\n"
		append msg "Please add the IP repositories to the project."
		# Generate the error message on the console and in the logs
		puts "Error: $msg"
		catch {common::send_msg_id "design.tcl" "ERROR" $msg}

		# IP checks fail
		return 0
	}

	# IP checks pass
	return 1
}

# -----------------------------------------------------------------------------
# Create the Block Design
# -----------------------------------------------------------------------------
#
proc create_block_design {{parent_cell ""}} {

	# -------------------------------------------------------------------------
	# Block Design Object
	# -------------------------------------------------------------------------
	#
	# The following were generated by Vivado and then slightly reformated.
	#
	if { $parent_cell eq "" } {
		set parent_cell [get_bd_cells /]
	}

	# Get parent object
	set parent_obj [get_bd_cells $parent_cell]
	if { $parent_obj == "" } {
		set msg "Unable to find parent cell <$parent_cell>!"
		catch {common::send_msg_id "design.tcl" "ERROR" $msg}
		return
	}

	# Check the parent type
	set parent_type [get_property TYPE $parent_obj]
	if { $parent_type ne "hier" } {
		set msg    "Parent <$parent_obj> has TYPE = <$parent_type>."
		append msg " Expected to be <hier>."
		catch {common::send_msg_id "design.tcl" "ERROR" $msg}
		return
	}

	# Save current instance; Restore later
	set old_bd_instance [current_bd_instance .]

	# Set parent object as current
	current_bd_instance $parent_obj

	# -------------------------------------------------------------------------
	# Create interface ports
	# -------------------------------------------------------------------------
	#
	# AXI4-Stream Transmit
	set axis_txd [ create_bd_intf_port -mode Master \
		-vlnv xilinx.com:interface:axis_rtl:1.0 axis_txd ]

	# AXI4-Stream Receive
	set axis_rxd [ create_bd_intf_port -mode Slave \
		-vlnv xilinx.com:interface:axis_rtl:1.0 axis_rxd ]
	set_property -dict [ list \
		CONFIG.HAS_TKEEP        {0} \
		CONFIG.HAS_TLAST        {1} \
		CONFIG.HAS_TREADY       {1} \
		CONFIG.HAS_TSTRB        {0} \
		CONFIG.LAYERED_METADATA {undef} \
		CONFIG.TDATA_NUM_BYTES  {4} \
		CONFIG.TDEST_WIDTH      {0} \
		CONFIG.TID_WIDTH        {0} \
		CONFIG.TUSER_WIDTH      {0} \
	] $axis_rxd

	# -------------------------------------------------------------------------
	# Create ports
	# -------------------------------------------------------------------------
	#
	# Reset
	set rst_n [ create_bd_port -dir I -type rst rst_n ]

	# Clock
	set clk [ create_bd_port -dir I -type clk clk ]

	# -------------------------------------------------------------------------
	# u1: JTAG-to-AXI Bridge
	# -------------------------------------------------------------------------
	#
	# Instance
	set u1_jtag [ create_bd_cell -type ip \
		-vlnv xilinx.com:ip:jtag_axi:1.2 u1_jtag ]

	# -------------------------------------------------------------------------
	# u2: AXI Verification IP
	# -------------------------------------------------------------------------
	#
	# Instance
	set u2_vip [ create_bd_cell -type ip \
		-vlnv xilinx.com:ip:axi_vip:1.1 u2_vip ]

	# -------------------------------------------------------------------------
	# u3: Smart Interconnect
	# -------------------------------------------------------------------------
	#
	# Instance
	set u3_smartconnect [ create_bd_cell -type ip \
		-vlnv xilinx.com:ip:smartconnect:1.0 u3_smartconnect ]
	#
	# Properties
	set_property -dict [list \
		CONFIG.NUM_MI {2} \
		CONFIG.NUM_SI {1} \
	] $u3_smartconnect

	# -------------------------------------------------------------------------
	# u4: AXI4-Stream FIFO
	# -------------------------------------------------------------------------
	#
	# Instance
	set u4_fifo [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_fifo_mm_s:4.3 u4_fifo ]
	#
	# Properties
	set_property -dict [list \
		CONFIG.C_DATA_INTERFACE_TYPE  {1} \
		CONFIG.C_RX_FIFO_DEPTH        {2048} \
		CONFIG.C_RX_FIFO_PE_THRESHOLD {5} \
		CONFIG.C_RX_FIFO_PF_THRESHOLD {2040} \
		CONFIG.C_TX_FIFO_DEPTH        {2048} \
		CONFIG.C_TX_FIFO_PE_THRESHOLD {5} \
		CONFIG.C_TX_FIFO_PF_THRESHOLD {2040} \
		CONFIG.C_USE_TX_CTRL          {0} \
	] $u4_fifo

	# -------------------------------------------------------------------------
	# Interface Connections
	# -------------------------------------------------------------------------
	#
	# JTAG-to-AXI to AXI VIP connection
	connect_bd_intf_net -intf_net axi_jtag \
		[get_bd_intf_pins u1_jtag/M_AXI] \
		[get_bd_intf_pins u2_vip/S_AXI]

	# AXI VIP to AXI Smartconnect
	connect_bd_intf_net -intf_net axi_vip \
		[get_bd_intf_pins u2_vip/M_AXI] \
		[get_bd_intf_pins u3_smartconnect/S00_AXI]

	# AXI Smartconnect to AXI4-Stream FIFO AXI4-Lite interface
	connect_bd_intf_net -intf_net axi_fifo_lite \
		[get_bd_intf_pins u3_smartconnect/M00_AXI] \
		[get_bd_intf_pins u4_fifo/S_AXI]

	# AXI Smartconnect to AXI4-Stream FIFO AXI4-Full interface
	connect_bd_intf_net -intf_net axi_fifo_full \
		[get_bd_intf_pins u3_smartconnect/M01_AXI] \
		[get_bd_intf_pins u4_fifo/S_AXI_FULL]

	# AXI4-Stream FIFO Transmit to top-level
	connect_bd_intf_net -intf_net axis_txd \
		[get_bd_intf_ports axis_txd] \
		[get_bd_intf_pins u4_fifo/AXI_STR_TXD]

	# AXI4-Stream FIFO Receive to top-level
	connect_bd_intf_net -intf_net axis_rxd \
		[get_bd_intf_ports axis_rxd] \
		[get_bd_intf_pins u4_fifo/AXI_STR_RXD]

	# -------------------------------------------------------------------------
	# Port Connections
	# -------------------------------------------------------------------------
	#
	# Reset
	connect_bd_net -net rst_n \
		[get_bd_ports rst_n] \
		[get_bd_pins u1_jtag/aresetn] \
		[get_bd_pins u2_vip/aresetn] \
		[get_bd_pins u3_smartconnect/aresetn] \
		[get_bd_pins u4_fifo/s_axi_aresetn]

	# Clock
	connect_bd_net -net clk \
		[get_bd_ports clk] \
		[get_bd_pins u1_jtag/aclk] \
		[get_bd_pins u2_vip/aclk] \
		[get_bd_pins u3_smartconnect/aclk] \
		[get_bd_pins u4_fifo/s_axi_aclk]

	# -------------------------------------------------------------------------
	# Create address segments
	# -------------------------------------------------------------------------
	#
	# AXI4-Stream FIFO AXI4-Lite interface
	assign_bd_address -offset 0x00000000 -range 0x00010000 \
		-target_address_space [get_bd_addr_spaces u1_jtag/Data] \
		[get_bd_addr_segs u4_fifo/S_AXI/Mem0] -force

	# AXI4-Stream FIFO AXI4-Full interface
	assign_bd_address -offset 0x00010000 -range 0x00010000 \
		-target_address_space [get_bd_addr_spaces u1_jtag/Data] \
		[get_bd_addr_segs u4_fifo/S_AXI_FULL/Mem1] -force

	# -------------------------------------------------------------------------
	# Block design finalization
	# -------------------------------------------------------------------------
	#
	# Restore current instance
	current_bd_instance $old_bd_instance

	# Validate and save
	validate_bd_design
	save_bd_design
	return
}

